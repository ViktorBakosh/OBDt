-- Table: public.complexmedicine

-- DROP TABLE IF EXISTS public.complexmedicine;

CREATE TABLE IF NOT EXISTS public.complexmedicine
(
    id integer NOT NULL DEFAULT nextval('complexmedicine_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT complexmedicine_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.complexmedicine
    OWNER to postgres;

-- Table: public.contraindications

-- DROP TABLE IF EXISTS public.contraindications;

CREATE TABLE IF NOT EXISTS public.contraindications
(
    id integer NOT NULL DEFAULT nextval('contraindications_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT contraindications_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.contraindications
    OWNER to postgres;

GRANT ALL ON TABLE public.contraindications TO postgres;


-- Table: public.diagnosis

-- DROP TABLE IF EXISTS public.diagnosis;

CREATE TABLE IF NOT EXISTS public.diagnosis
(
    id integer NOT NULL DEFAULT nextval('diagnosis_id_seq'::regclass),
    patient_id integer,
    doctor_id integer,
    disease_id integer,
    CONSTRAINT diagnosis_pkey PRIMARY KEY (id),
    CONSTRAINT diagnosis_disease_id_fkey FOREIGN KEY (disease_id)
        REFERENCES public.disease (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT diagnosis_doctor_id_fkey FOREIGN KEY (doctor_id)
        REFERENCES public.doctor (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT diagnosis_patient_id_fkey FOREIGN KEY (patient_id)
        REFERENCES public.patient (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.diagnosis
    OWNER to postgres;

-- Table: public.disease

-- DROP TABLE IF EXISTS public.disease;

CREATE TABLE IF NOT EXISTS public.disease
(
    id integer NOT NULL DEFAULT nextval('disease_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT disease_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.disease
    OWNER to postgres;

-- Table: public.doctor

-- DROP TABLE IF EXISTS public.doctor;

CREATE TABLE IF NOT EXISTS public.doctor
(
    id integer NOT NULL DEFAULT nextval('doctor_id_seq'::regclass),
    lastname character varying(50) COLLATE pg_catalog."default",
    specialization character varying(100) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    rating numeric,
    CONSTRAINT doctor_pkey PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.doctor
    OWNER to postgres;

-- Table: public.medicine

-- DROP TABLE IF EXISTS public.medicine;

CREATE TABLE IF NOT EXISTS public.medicine
(
    id integer NOT NULL DEFAULT nextval('medicine_id_seq'::regclass),
    name character varying(100) COLLATE pg_catalog."default",
    complexmedicine_id integer,
    CONSTRAINT medicine_pkey PRIMARY KEY (id),
    CONSTRAINT complexmedecine_fk FOREIGN KEY (complexmedicine_id)
        REFERENCES public.complexmedicine (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.medicine
    OWNER to postgres;

-- Table: public.patient

-- DROP TABLE IF EXISTS public.patient;

CREATE TABLE IF NOT EXISTS public.patient
(
    id integer NOT NULL DEFAULT nextval('patient_id_seq'::regclass),
    lastname character varying(50) COLLATE pg_catalog."default",
    firstname character varying(50) COLLATE pg_catalog."default",
    middlename character varying(50) COLLATE pg_catalog."default",
    address character varying(100) COLLATE pg_catalog."default",
    characteristics character varying(200) COLLATE pg_catalog."default",
    contraindications integer,
    CONSTRAINT patient_pkey PRIMARY KEY (id),
    CONSTRAINT contraindications_fk FOREIGN KEY (contraindications)
        REFERENCES public.contraindications (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.patient
    OWNER to postgres;

GRANT ALL ON TABLE public.patient TO postgres;


-- Table: public.prescription

-- DROP TABLE IF EXISTS public.prescription;

CREATE TABLE IF NOT EXISTS public.prescription
(
    id integer NOT NULL DEFAULT nextval('prescription_id_seq'::regclass),
    medicine_id integer,
    CONSTRAINT prescription_pkey PRIMARY KEY (id),
    CONSTRAINT prescription_medicineid_fkey FOREIGN KEY (medicine_id)
        REFERENCES public.medicine (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.prescription
    OWNER to postgres;

-- Table: public.treatment

-- DROP TABLE IF EXISTS public.treatment;

CREATE TABLE IF NOT EXISTS public.treatment
(
    id integer NOT NULL DEFAULT nextval('treatment_id_seq'::regclass),
    patient_id integer,
    doctor_id integer,
    prescription_id integer,
    treatment_start_date date NOT NULL,
    treatment_end_date date NOT NULL,
    treatmentrating integer,
    diagnosis_id integer,
    CONSTRAINT treatment_pkey PRIMARY KEY (id),
    CONSTRAINT diagnosis_fk FOREIGN KEY (diagnosis_id)
        REFERENCES public.diagnosis (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT doctor_fk FOREIGN KEY (doctor_id)
        REFERENCES public.doctor (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT patient_fk FOREIGN KEY (patient_id)
        REFERENCES public.patient (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT prescription_kf FOREIGN KEY (prescription_id)
        REFERENCES public.prescription (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.treatment
    OWNER to postgres;
